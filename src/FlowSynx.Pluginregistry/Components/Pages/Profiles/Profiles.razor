@page "/profiles/{UserName}"

@using System.Text.Json
@using System.Security.Claims
@using FlowSynx.PluginRegistry.Application.Features.Plugins.Query.PluginDetails
@using FlowSynx.PluginRegistry.Application.Features.Plugins.Query.PluginsListByProfile;
@using FlowSynx.PluginRegistry.Application.Features.Plugins.Query.PluginsStatisticsByProfile;
@using FlowSynx.PluginRegistry.Application.Services
@using FlowSynx.PluginRegistry.Application.Wrapper
@using FlowSynx.Pluginregistry.Helpers
@using FlowSynx.Pluginregistry.Services
@using FlowSynx.Pluginregistry.Components.Shared;
@using Microsoft.AspNetCore.WebUtilities
@using System.Net

@inject NavigationManager Navigation
@inject IStatsApiService Stats
@inject IGravatar gravatar

<PageTitle>Profile | @UserName</PageTitle>

<div class="container p-5">
    <div class="row">
        @if (plugins == null)
        {
            <div class="col-md-12 mx-auto">
                <div class="card mb-3">
                    <div class="card-body">
                        <p>Loading ...</p>
                    </div>
                </div>
            </div>
        }
        else if (!plugins.Succeeded)
        {
            <div class="col-md-12 mx-auto">
                <div class="card mb-3">
                    <div class="card-body">
                        @string.Join(Environment.NewLine, plugins.Messages)
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-md-9 mx-auto">
                    @if (plugins?.Data?.Count() == 0)
                    {
                        <div class="card p-5">
                            <h4 class="text-muted">No plugins found</h4>
                            <p class="text-secondary">No pluins found for <b>@UserName</b> profile.</p>
                        </div>
                    }
                    else
                    {
                        @foreach (var plugin in plugins?.Data!)
                        {
                            <div class="card mb-2 border">
                                <div class="card-body">
                                    <h4 class="card-title"><a href="/plugins/@plugin.Type/@plugin.Version">@plugin.Type</a></h4>
                                    @if (plugin.Owners.Any())
                                    {
                                        <div>
                                            By:
                                            @foreach (var owner in plugin.Owners)
                                            {
                                                <a class="me-2" href="/profiles/@owner">@owner</a>
                                            }
                                        </div>
                                    }
                                    @{
                                        @if (plugin.Tags.Any())
                                        {
                                            <div>
                                                @foreach (var tag in plugin.Tags)
                                                {
                                                    <a href="/plugins?q=@WebUtility.UrlEncode($"tag:{tag}")">
                                                        <span class="badge border border-secondary text-secondary me-1">@tag</span>
                                                    </a>
                                                }
                                            </div>
                                        }
                                    }
                                    <div class="d-flex flex-column flex-md-row align-items-start text-start gap-0 mt-3">
                                        <div class="me-3">
                                            <i class="bi bi-download text-secondary"></i>
                                            @plugin.TotalDownload.ToString("N0") total downloads
                                        </div>
                                        <div class="me-3">
                                            <i class="bi bi-clock-history text-secondary"></i>
                                            last updated: @TimeHelper.GetHumanReadableDate(plugin.LastUpdated)
                                        </div>
                                        <div class="me-3">
                                            <i class="bi bi-tag text-secondary"></i>
                                            Latest version: @plugin.Version
                                        </div>
                                    </div>
                                    <p class="mt-3 card-text">@plugin.Description</p>
                                </div>
                            </div>
                        }

                        <Pagination CurrentPage="@currentPage" TotalPages="@totalPages" />
                    }
                </div>
                <div class="col-md-3 mx-auto bg-light">
                    <div class="card border-0 bg-light">
                        <div class="card-body p-3">
                            <div class="d-flex">
                                <div>
                                    <div class="h2 fw-bolder text-center">@UserName</div>
                                    @if (!string.IsNullOrEmpty(@email)){
                                        <div class="mb-3">
                                            <img src="@gravatar.GetGravatarUrl(@email, 256);" width="256" height="256" class="rounded-circle" alt="@UserName">
                                        </div>
                                    }
                                    <div class="mb-4">
                                        <h2 class="fs-2">@totalPluins.ToString("N0")</h2>
                                        <p class="fs-6 text-muted">Plugins</p>
                                    </div>
                                    <div class="mb-4">
                                        <h2 class="fs-2">@totalPluinsDownloads.ToString("N0")</h2>
                                        <p class="fs-6 text-muted">Total downloads of plugins</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            }
    </div>
</div>

@code {
    [Parameter]
    public string UserName { get; set; } = "";

    PaginatedResult<PluginsListByProfileResponse>? plugins;
    Result<PluginsStatisticsByProfileResponse>? pluginStatistics;

    private int currentPage = 1;
    private int totalPages => plugins == null ? 1 : plugins.TotalPages;

    private string? email => (pluginStatistics == null || !pluginStatistics.Succeeded) 
        ? "" 
        : pluginStatistics.Data.Email;

    private int totalPluins => (pluginStatistics == null || !pluginStatistics.Succeeded) 
        ? 0 
        : pluginStatistics.Data.TotalCount;

    private long totalPluinsDownloads => (pluginStatistics == null || !pluginStatistics.Succeeded) 
        ? 0 
        : pluginStatistics.Data.TotalDownload;

    protected override async Task OnInitializedAsync()
    {
        Navigation.LocationChanged += OnLocationChanged;
        await LoadPage();
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        await LoadPage();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadPage()
    {
        var uri = new Uri(Navigation.Uri);
        if (!string.IsNullOrWhiteSpace(uri.Query))
        {
            var queryStrings = QueryHelpers.ParseQuery(uri.Query);

            if (queryStrings.TryGetValue("page", out var pageStr) && int.TryParse(pageStr, out var page))
                currentPage = Math.Max(page, 1);
            else
                currentPage = 1;
        }

        plugins = await Stats.GetPluginsByUserName(UserName, currentPage);
        pluginStatistics = await Stats.GetPluginStatisticsByUsername(UserName);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}