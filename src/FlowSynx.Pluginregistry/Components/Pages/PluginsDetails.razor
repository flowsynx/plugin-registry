@page "/plugins/{Type}/{Version}"

@using System.Security.Claims
@using FlowSynx.PluginRegistry.Application.Features.Plugins.Query.PluginDetails
@using FlowSynx.PluginRegistry.Application.Wrapper
@using FlowSynx.Pluginregistry.Helpers
@using FlowSynx.Pluginregistry.Services

@inject NavigationManager Navigation
@inject IStatsApiService Stats

<PageTitle>Plugin details</PageTitle>

<div class="container p-5">
    <div class="row">
        @if (plugin == null)
        {
            <div class="col-md-12 mx-auto">
                <div class="card mb-3">
                    <div class="card-body">
                        <p>Loading ...</p>
                    </div>
                </div>
            </div>
        }
        else if (!plugin.Succeeded)
        {
            <div class="col-md-12 mx-auto">
                <div class="card mb-3">
                    <div class="card-body">
                        @string.Join(Environment.NewLine, plugin.Messages)
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row gx-5">
                <div class="col-xl-8">
                    <h2 class="fw-bolder mb-3">Account &amp; Billing</h2>
                    <div class="accordion mb-5" id="accordionExample">
                        <div class="accordion-item">
                            <h3 class="accordion-header" id="headingOne"><button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">Accordion Item #1</button></h3>
                            <div class="accordion-collapse collapse show" id="collapseOne" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                                <div class="accordion-body">
                                    <strong>This is the first item's accordion body.</strong>
                                    It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the
                                    <code>.accordion-body</code>
                                    , though the transition does limit overflow.
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h3 class="accordion-header" id="headingTwo"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">Accordion Item #2</button></h3>
                            <div class="accordion-collapse collapse" id="collapseTwo" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                                <div class="accordion-body">
                                    <strong>This is the second item's accordion body.</strong>
                                    It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the
                                    <code>.accordion-body</code>
                                    , though the transition does limit overflow.
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h3 class="accordion-header" id="headingThree"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">Accordion Item #3</button></h3>
                            <div class="accordion-collapse collapse" id="collapseThree" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
                                <div class="accordion-body">
                                    <strong>This is the third item's accordion body.</strong>
                                    It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the
                                    <code>.accordion-body</code>
                                    , though the transition does limit overflow.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-4">
                    <div class="card border-0 bg-light mt-xl-5">
                        <div class="card-body p-3">
                            <div class="d-flex">
                                <div>
                                    <div class="h4 fw-bolder">About</div>
                                    <div class="mb-3">
                                        <i class="bi bi-clock-history text-secondary"></i>
                                        last updated: @TimeHelper.GetLastUpdatedText(plugin.Data.LastUpdated)
                                    </div>
                                    @if (!string.IsNullOrEmpty(plugin.Data.Url))
                                    {
                                    <div class="mb-3">
                                        <i class="bi bi-globe text-secondary"></i>
                                        <a href="@plugin.Data.Url" target="_blank">@plugin.Data.Url</a>
                                    </div>
                                    }

                                    @if (plugin.Data.Owners.Any())
                                    {
                                        <div class="mb-3">
                                            <h6>Owners</h6>
                                            @foreach (var owner in plugin.Data.Owners)
                                            {
                                                <a class="me-2" href="/profile/@owner">@owner</a>
                                            }
                                        </div>
                                    }
                                    @{
                                        var tags = StringHelper.GetTagsList(plugin.Data.Tags);
                                        @if (tags.Any())
                                        {
                                            <div class="mb-3">
                                                <h6>Tags</h6>
                                                @foreach (var tag in tags)
                                                {
                                                    <span class="badge border border-primary text-primary">@tag</span>
                                                }
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Type { get; set; } = "";

    [Parameter]
    public string Version { get; set; } = "";

    Result<PluginDetailsResponse>? plugin;
    protected override async Task OnInitializedAsync()
    {
        plugin = await Stats.GetPluginDetails(Type, Version);
    }
}