@using System.Security.Claims
@using FlowSynx.PluginRegistry.Application.Services

@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject IGravatar gravatar
@inject AuthenticationStateProvider AuthenticationStateProvider

<main class="flex-shrink-0">
    <div class="hero-banner">
        <nav class="navbar navbar-expand-lg">
            <div class="container px-5">
                <a class="navbar-brand pe-2" href="/">
                    <img src="/images/logo.png" alt="Logo" width="24" height="24" class="d-inline-block align-text-top">
                    Plugin Registry
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                        data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item"><a class="nav-link" href="/plugins">Plugins</a></li>
                        <li class="nav-item"><a class="nav-link" href="/manage/upload">Upload</a></li>
                        <li class="nav-item"><a class="nav-link" href="/downloads">Downloads</a></li>
                    </ul>
                    <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                        @if (!IsAuthenticated)
                        {
                            <li class="nav-item"><a class="nav-link" href="@GetLoginUrl()">Login</a></li>
                        }
                        else
                        {
                            <li class="nav-item dropdown">
                                <a href="#" role="button" class="d-flex nav-link align-items-center text-decoration-none dropdown-toggle" id="accountDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <img src="@gravatar.GetGravatarUrl(@Email!, 24);" width="24" height="24" class="rounded-circle me-2" alt="@Name">
                                    <span class="d-none d-sm-inline">@Name</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="accountDropdown">
                                    <li><a class="dropdown-item" href="/profiles/@Login">View Profile</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item" href="/api/account/logout">Logout</a></li>
                                </ul>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>

        <div class="py-3">
            <div class="container px-5">
                <form class="d-flex" role="search" method="get" action="/plugins">
                    <div class="input-group">
                        <InputText @bind-Value="q" type="search" class="form-control border-dark" placeholder="Search plugins..." aria-label="Search plugins..." aria-describedby="button-addon2"></InputText>
                        <button class="btn btn-outline-dark" type="submit" id="button-addon2">Search</button>
                    </div>
                </form>
            </div>
        </div>
        @if (IsHomePage)
        {
            <section class="py-1">
                <div class="container px-5">
                    <div class="row gx-5 align-items-center justify-content-center hero-content">
                        <div class="col-lg-12 col-xl-12 col-xxl-12">
                            <div class="my-5 text-center text-xl-start">
                                <h1 class="display-5 fw-bolder text-dark mb-2">Official FlowSynx plugin registry</h1>
                                <p class="lead fw-normal text-dark mb-4">Discover, Extend, Automate — Power Up Your FlowSynx Workflows With Seamless Plugin Integration</p>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        }
    </div>

    @Body
</main>

<footer class="bg-light py-4 mt-auto">
    <div class="container px-5">
        <div class="row align-items-center justify-content-between flex-column flex-sm-row">
            <div class="col-auto"><div class="small m-0">Copyright &copy; <a href="https://flowsynx.io" target="_blank">FlowSynx</a> 2025</div></div>
        </div>
    </div>
</footer>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    [Parameter] public string? q { get; set; }

    private ClaimsPrincipal? User;
    private bool IsAuthenticated;
    private string? Name;
    private string? Login;
    private string? Email;

    protected override async void OnInitialized()
    {
        var uri = new Uri(Navigation.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        q = queryString["q"];

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        IsAuthenticated = User?.Identity?.IsAuthenticated ?? false;
        Name = User?.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value;
        Login = User?.FindFirst("login")?.Value;
        Email = User?.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
        await InvokeAsync(StateHasChanged);
    }

    private string GetLoginUrl()
    {
        var currentUrl = "/" + Navigation.ToBaseRelativePath(Navigation.Uri);
        var encodedUrl = Uri.EscapeDataString(currentUrl);
        return $"api/account/login?returnUrl={encodedUrl}";
    }

    private bool IsHomePage => IsCurrentUriRoot();

    private bool IsCurrentUriRoot()
    {
        var uri = Navigation.ToBaseRelativePath(Navigation.Uri);
        return string.IsNullOrWhiteSpace(uri) || uri == "/";
    }
}